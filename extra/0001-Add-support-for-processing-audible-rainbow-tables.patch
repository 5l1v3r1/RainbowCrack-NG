From b7b137d3a48479ee0d95a6311be0c757282587d6 Mon Sep 17 00:00:00 2001
From: Vesselin Bontchev <vesselin.bontchev@yandex.com>
Date: Mon, 26 Jun 2017 21:33:32 +0530
Subject: [PATCH] Add support for processing "audible" rainbow tables

Apply this patch to rcracki_mt_0.7.0_src.7z file.

This patch still does *not* work for "audible" RTI2 tables!
---
 rcracki_mt/HashAlgorithm.cpp | 70 +++++++++++++++++++++++++++++++-------------
 rcracki_mt/HashAlgorithm.h   |  3 ++
 rcracki_mt/HashRoutine.cpp   |  1 +
 rcracki_mt/RTI2Common.cpp    |  2 ++
 rcracki_mt/RTI2Common.h      |  2 ++
 rcracki_mt/RTI2Reader.cpp    | 28 +++++++++---------
 6 files changed, 71 insertions(+), 35 deletions(-)

diff --git a/rcracki_mt/HashAlgorithm.cpp b/rcracki_mt/HashAlgorithm.cpp
index 5059b21..ebd41e0 100644
--- a/rcracki_mt/HashAlgorithm.cpp
+++ b/rcracki_mt/HashAlgorithm.cpp
@@ -69,7 +69,7 @@ void setup_des_key(unsigned char key_56[], des_key_schedule &ks)
 }
 
 
-//It doesnt convert to upper case that must be done before 
+//It doesnt convert to upper case that must be done before
 //otherwise it will produce a wrong a hash
 void HashLM(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 {
@@ -94,7 +94,7 @@ void HashLMCHALL(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 	unsigned char pass[14];
 	unsigned char pre_lmresp[21];
 	static unsigned char magic[] = {0x4B, 0x47, 0x53, 0x21, 0x40, 0x23, 0x24, 0x25};
-	static unsigned char spoofed_challange[] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}; 
+	static unsigned char spoofed_challange[] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 	des_key_schedule ks;
 
 	memset (pass,0,sizeof(pass));
@@ -117,58 +117,58 @@ void HashLMCHALL(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 	setup_des_key(&pre_lmresp[14], ks);
 	des_ecb_encrypt((des_cblock*)spoofed_challange, (des_cblock*)&pHash[16], ks, DES_ENCRYPT);
 
-} 
+}
 
 void HashHALFLMCHALL(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
-{	
+{
 	unsigned char pre_lmresp[8];
 	static unsigned char magic[] = {0x4B, 0x47, 0x53, 0x21, 0x40, 0x23, 0x24, 0x25};
 	static unsigned char salt[] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 
 	des_key_schedule ks;
-	unsigned char plain[8] = {0};	
+	unsigned char plain[8] = {0};
 	memcpy(plain, pPlain, nPlainLen);
 	setup_des_key(plain, ks);
 	des_ecb_encrypt((des_cblock*)magic, (des_cblock*)pre_lmresp, ks, DES_ENCRYPT);
 
 	setup_des_key(pre_lmresp, ks);
 	des_ecb_encrypt((des_cblock*)salt, (des_cblock*)pHash, ks, DES_ENCRYPT);
-} 
+}
 
 
 
 void HashNTLMCHALL(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 {
 	unsigned char UnicodePlain[MAX_PLAIN_LEN * 2];
-	static unsigned char spoofed_challange[] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88}; 
-	
+	static unsigned char spoofed_challange[] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
+
 	int len = (nPlainLen < 127) ? nPlainLen : 127;
 	int i;
-	
+
 	for (i = 0; i < len; i++)
 	{
 	UnicodePlain[i * 2] = pPlain[i];
 	UnicodePlain[i * 2 + 1] = 0x00;
 	}
-	
+
 	des_key_schedule ks;
 	unsigned char lm[21];
-	
+
 	/*MD4_CTX ctx;
 	MD4_Init(&ctx);
 	MD4_Update(&ctx, UnicodePlain, len * 2);
 	MD4_Final(lm, &ctx);  */
 	MD4_NEW(UnicodePlain, len * 2, lm);
-	
+
 	//MD4(UnicodePlain, len * 2, lm);
 	lm[16] = lm[17] = lm[18] = lm[19] = lm[20] = 0;
-	
+
 	setup_des_key(lm, ks);
 	des_ecb_encrypt((des_cblock*)spoofed_challange, (des_cblock*)pHash, ks, DES_ENCRYPT);
-	
+
 	setup_des_key(&lm[7], ks);
 	des_ecb_encrypt((des_cblock*)spoofed_challange, (des_cblock*)&pHash[8], ks, DES_ENCRYPT);
-	
+
 	setup_des_key(&lm[14], ks);
 	des_ecb_encrypt((des_cblock*)spoofed_challange, (des_cblock*)&pHash[16], ks, DES_ENCRYPT);
 }
@@ -282,7 +282,7 @@ void HashRIPEMD160(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 	RIPEMD160_CTX ctx;
 	RIPEMD160_Init(&ctx);
 	RIPEMD160_Update(&ctx, pPlain, nPlainLen);
-	RIPEMD160_Final(pHash, &ctx);  
+	RIPEMD160_Final(pHash, &ctx);
 
 	//RIPEMD160(pPlain, nPlainLen, pHash);
 }
@@ -329,11 +329,11 @@ void HashMSCACHE(unsigned char *pPlain, int nPlainLen, unsigned char* pHash)
 		unicode_pwd[i*2+1] = 0x00;
 	}*/
 	/*
-	unsigned char *buf = (unsigned char*)calloc(MSCACHE_HASH_SIZE + nSaltLength, sizeof(unsigned char));	
+	unsigned char *buf = (unsigned char*)calloc(MSCACHE_HASH_SIZE + nSaltLength, sizeof(unsigned char));
 	HashNTLM(pPlain, nPlainLen, buf, NULL);
 	//MD4(unicode_pwd, nPlainLen*2, buf);
 	memcpy(buf + MSCACHE_HASH_SIZE, pSalt, nSaltLength);
-	MD4(buf, MSCACHE_HASH_SIZE + nSaltLength, pHash); 
+	MD4(buf, MSCACHE_HASH_SIZE + nSaltLength, pHash);
 	free(buf);
 	*/
 //}
@@ -342,11 +342,11 @@ void HashMSCACHE(unsigned char *pPlain, int nPlainLen, unsigned char* pHash)
 // Code for MySQL password hashing
 //*********************************************************************************
 
-inline void mysql_hash_password_323(unsigned long *result, const char *password) 
+inline void mysql_hash_password_323(unsigned long *result, const char *password)
 {
 	register unsigned long nr=1345345333L, add=7, nr2=0x12345671L;
 	unsigned long tmp;
-	for (; *password ; password++) 
+	for (; *password ; password++)
 	{
 		if (*password == ' ' || *password == '\t') continue;
 		tmp= (unsigned long) (unsigned char) *password;
@@ -361,7 +361,7 @@ inline void mysql_hash_password_323(unsigned long *result, const char *password)
 
 void HashMySQL323(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 {
-	unsigned long hash_pass[2];	
+	unsigned long hash_pass[2];
 	unsigned char* f = (unsigned char*) hash_pass;
 
 	unsigned char* pass = (unsigned char*) calloc (nPlainLen+4,sizeof(unsigned char));
@@ -391,6 +391,34 @@ void HashMySQLSHA1(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 void HashMySQLSHA1(unsigned char* pPlain, int nPlainLen, unsigned char* pHash) {}
 #endif
 
+void HashAudibleAAX(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
+{
+	unsigned char fixed_key[] = { 0x77, 0x21, 0x4d, 0x4b, 0x19, 0x6a, 0x87, 0xcd, 0x52, 0x00, 0x45, 0xfd, 0x20, 0xa5, 0x1d, 0x67 };
+
+	unsigned char hash1[20] = {0};
+	unsigned char hash2[20] = {0};
+	SHA_CTX ctx;
+
+	// fixed_key + "guess"
+	SHA1_Init(&ctx);
+	SHA1_Update(&ctx, fixed_key, 16);
+	SHA1_Update(&ctx, pPlain, nPlainLen);
+	SHA1_Final(hash1, &ctx);
+
+	// fixed_key + previous hash + guess
+	SHA1_Init(&ctx);
+	SHA1_Update(&ctx, fixed_key, 16);
+	SHA1_Update(&ctx, hash1, 20);
+	SHA1_Update(&ctx, pPlain, nPlainLen);
+	SHA1_Final(hash2, &ctx);
+
+	// final checksum calculation
+	SHA1_Init(&ctx);
+	SHA1_Update(&ctx, hash1, 16); // only 16 bytes!
+	SHA1_Update(&ctx, hash2, 16);
+	SHA1_Final(pHash, &ctx);
+}
+
 //*********************************************************************************
 // Code for PIX password hashing
 //*********************************************************************************
diff --git a/rcracki_mt/HashAlgorithm.h b/rcracki_mt/HashAlgorithm.h
index 39bb17b..aa28490 100644
--- a/rcracki_mt/HashAlgorithm.h
+++ b/rcracki_mt/HashAlgorithm.h
@@ -58,6 +58,9 @@ void HashHALFLMCHALL(unsigned char* pPlain, int nPlainLen, unsigned char* pHash)
 void HashNTLMCHALL(unsigned char* pPlain, int nPlainLen, unsigned char* pHash);
 void HashORACLE(unsigned char* pPlain, int nPlainLen, unsigned char* pHash);
 
+// AudibleAAX
+void HashAudibleAAX(unsigned char* pPlain, int nPlainLen, unsigned char* pHash);
+
 #if !defined(_WIN32) || defined(__GNUC__)
 char *strupr(char *s1);
 #endif
diff --git a/rcracki_mt/HashRoutine.cpp b/rcracki_mt/HashRoutine.cpp
index ae7d3d2..d06ea15 100644
--- a/rcracki_mt/HashRoutine.cpp
+++ b/rcracki_mt/HashRoutine.cpp
@@ -48,6 +48,7 @@ CHashRoutine::CHashRoutine()
 //	AddHashRoutine("ciscopix", HashPIX, 16);
 //	AddHashRoutine("mscache", HashMSCACHE, 16);
 	AddHashRoutine("halflmchall", HashHALFLMCHALL, 8, -1);
+	AddHashRoutine("audible", HashAudibleAAX, 20, -1);
 
 	// Added from mao
 	AddHashRoutine("lmchall", HashLMCHALL, 24, -1);
diff --git a/rcracki_mt/RTI2Common.cpp b/rcracki_mt/RTI2Common.cpp
index f8f9d74..5c4b3d2 100644
--- a/rcracki_mt/RTI2Common.cpp
+++ b/rcracki_mt/RTI2Common.cpp
@@ -46,6 +46,7 @@ enum algorithmValue { Custom
 	, SecondHalfLMChallenge
 	, NTLMChallenge
 	, Oracle
+	, AudibleAAX
 };
 
 static std::map<std::string, algorithmValue> mapAlgorithmValue;
@@ -72,6 +73,7 @@ static void initializeAlgorithmMap()
 	mapAlgorithmValue["SecondHalfLMChallenge"] = SecondHalfLMChallenge;
 	mapAlgorithmValue["ntlmchall"] = NTLMChallenge;
 	mapAlgorithmValue["oracle"] = Oracle;
+	mapAlgorithmValue["audible"] = AudibleAAX;
 }
 
 uint8_t getAlgorithmId( std::string algorithmName )
diff --git a/rcracki_mt/RTI2Common.h b/rcracki_mt/RTI2Common.h
index a8153c1..9aa2931 100644
--- a/rcracki_mt/RTI2Common.h
+++ b/rcracki_mt/RTI2Common.h
@@ -74,6 +74,7 @@ struct RTI20_Header_RainbowTableParameters
 		// 17 - Second Half LM Challenge
 		// 18 - NTLM Challenge
 		// 19 - Oracle
+		// 20 - Audible AAX
 	uint8_t  reductionFunction;
 		// 0 - RC   ("RainbowCrack" uses divide - project-rainbowcrack.com)
 		// 1 - FPM  ("Fixed Point Multiplication" - tobtu.com)
@@ -140,6 +141,7 @@ struct RTI20_File_Header
 			// 17 - Second Half LM Challenge
 			// 18 - NTLM Challenge
 			// 19 - Oracle
+			// 20 - Audible AAX
 		uint8_t  reductionFunction;
 			// 0 - RC   ("RainbowCrack" uses divide - project-rainbowcrack.com)
 			// 1 - FPM  ("Fixed Point Multiplication" - tobtu.com)
diff --git a/rcracki_mt/RTI2Reader.cpp b/rcracki_mt/RTI2Reader.cpp
index b22c6d6..dd4130e 100644
--- a/rcracki_mt/RTI2Reader.cpp
+++ b/rcracki_mt/RTI2Reader.cpp
@@ -39,7 +39,7 @@ RTI2Reader::RTI2Reader( std::string filename )
 
 	fin.open( filename.c_str(), std::ios_base::binary | std::ios_base::in );
 
-	if( !fin.seekg( 0, std::ios_base::beg ).good() 
+	if( !fin.seekg( 0, std::ios_base::beg ).good()
 		|| !fin.read( (char*) (&header), sizeof(header) ).good() )
 	{
 		std::cerr << "readHeader fin.read() error" << std::endl;
@@ -98,14 +98,14 @@ RTI2Reader::RTI2Reader( std::string filename )
 		exit( 2 ); // invalid header
 	}
 
-	if ( header.algorithm > 19 )
+	if ( header.algorithm > 20 )
 	{
 		std::cerr << "readHeader parsing error" << std::endl;
 		std::cerr << "undefined algorithm: " << header.algorithm << std::endl;
 		exit( 2 ); // invalid header
 	}
 
-	if (  header.reductionFunction > 2 
+	if (  header.reductionFunction > 2
 		|| (header.reductionFunction <  1 && header.tableIndex > 65535)
 		|| (header.reductionFunction == 1 && header.tableIndex >   255))
 	{
@@ -134,7 +134,7 @@ RTI2Reader::RTI2Reader( std::string filename )
 		delete [] str;
 		exit( 2 );
 	}
-	
+
 	// Salt
 	setSalt( "" );
 
@@ -153,7 +153,7 @@ RTI2Reader::RTI2Reader( std::string filename )
 		str[ret] = 0;
 		setSalt( str );
 	}
-	
+
 	// Sub keyspaces
 	subKeySpaces.clear();
 
@@ -185,7 +185,7 @@ RTI2Reader::RTI2Reader( std::string filename )
 			delete [] str;
 			exit( 1 ); // file error
 		}
-	
+
 		if ( hybridSets == 0 )
 		{
 			std::cerr << "readHeader fin.read() error, hybridSets is 0"
@@ -294,7 +294,7 @@ RTI2Reader::RTI2Reader( std::string filename )
 
 			subKeySpace.perPositionCharacterSets.push_back(charSet);
 		}
-	
+
 		subKeySpaces.push_back(subKeySpace);
 	}
 
@@ -308,7 +308,7 @@ RTI2Reader::RTI2Reader( std::string filename )
 
 	checkPointPositions.assign((uint32_t*) str, ((uint32_t*) str) + header.checkPointBits);
 	delete [] str;
-	
+
 	// *** Index ***
 	if ( !fin.read( (char*) (&index.firstPrefix), 8 ).good() )
 	{
@@ -463,7 +463,7 @@ void RTI2Reader::Dump()
 			if ( subKeySpaces[i].charSetFlags[j] & 1 )
 			{
 				std::cout << "characterSet1: ";
-				
+
 				for ( uint32_t k = 0; k < subKeySpaces[i].perPositionCharacterSets[j].characterSet1.size(); k++ )
 				{
 					std::cout << subKeySpaces[i].perPositionCharacterSets[j].characterSet1[k];
@@ -471,7 +471,7 @@ void RTI2Reader::Dump()
 				std::cout << std::endl;
 			}
 		}
-		
+
 	}
 
 	std::cout << "header.checkPointBits: " << (uint32_t)header.checkPointBits
@@ -513,7 +513,7 @@ int RTI2Reader::readChains(unsigned int &numChains, RainbowChainO *pData)
 	uint64_t endPointMask = (( (uint64_t) 1 ) << header.endPointBits ) - 1;
 	uint64_t startPointMask = (( (uint64_t) 1 ) << header.startPointBits ) - 1;
 	uint32_t startPointShift = header.endPointBits;
-/*	
+/*
 	uint64_t checkPointMask = (( (uint64_t) ) << header.checkPointBits ) - 1;
 	uint32_t checkPointShift = header.endPointBits + header.StartPointBits;
 */
@@ -527,11 +527,11 @@ int RTI2Reader::readChains(unsigned int &numChains, RainbowChainO *pData)
 	} str;
 
 	str.alias = 0;
-	
+
 	// Fast forward to current position
 	// XXX for chainPosition != 0 use a binary search
 	// XXX get rid of this whole monstronsity for a nice pointer
-	
+
 	for( i = 1; i < index.prefixIndex.size(); i++ )
 	{
 		if ( i == 1 && index.prefixIndex[i] > 0 && chainPosition == 0 )
@@ -554,7 +554,7 @@ int RTI2Reader::readChains(unsigned int &numChains, RainbowChainO *pData)
 		if (  (chainPosition + readChains ) > index.prefixIndex[i] )
 			continue;
 		*/
-		
+
 		while ( (chainPosition + readChains ) < index.prefixIndex[i] )
 		{
 			// XXX for reading straight from data in memory
-- 
2.7.5

